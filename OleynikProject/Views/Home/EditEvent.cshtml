@model OleynikProject.Models.Service

@{
    ViewBag.Title = "EditEvent";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.Service.Name } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.Service.Email } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Services, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Services.Id, new SelectList(ViewBag.Services, "Id", "Title"), htmlAttributes: new { @class = "form-control", @Value = ViewBag.Service.Services.Id })
                @Html.ValidationMessageFor(model => model.Services.Id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StartTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.StartTime, new { @class = @"datepicker", @Value = ViewBag.Service.StartTime, autocomplete = "off" })
                @Html.ValidationMessageFor(model => model.StartTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
                @Html.ActionLink("Cancel", null, null, null, new { @class = "btn btn-default", href = Request.UrlReferrer })
            </div>
        </div>
        <script>
        var jsonObj = @Html.Raw(Json.Encode(ViewBag.listblock));
        var list = ["12/27/2020:8", "12/30/2020:17", "12/30/2020:15"];
        for (i = 0; i < jsonObj.length; i++) {
            list.push(formatDate2(jsonObj[i].StartTime.slice(6).slice(0, jsonObj[i].StartTime.slice(6).length - 2)));
        }

        function formatDate2(datestr) {
            var date = new Date(datestr * 1);
            var day = date.getDate(); day = day > 9 ? day : "0" + day;
            var month = date.getMonth() + 1; month = month > 9 ? month : "0" + month;
            return month + "/" + day + "/" + date.getFullYear() + ":" + date.getHours();
        }

        function formatDate(datestr) {
            var date = new Date(datestr);
            var day = date.getDate(); day = day > 9 ? day : "0" + day;
            var month = date.getMonth() + 1; month = month > 9 ? month : "0" + month;
            return month + "/" + day + "/" + date.getFullYear();
        }

        $(".datepicker").datetimepicker({
            format: 'dd.mm.yyyy HH:ii:00',
            autoclose: true,
            onRenderHour: function (date) {
                if (list.indexOf(formatDate(date) + ":" + date.getUTCHours()) > -1) {
                    return ['disabled'];
                }
            }
        });
        </script>
    </div>
}
